{
  "_args": [
    [
      "reaper@0.3.1",
      "/home/dave/src/experiments/NodeTutorial/keyword-wrangler/node_modules/percolator"
    ]
  ],
  "_from": "reaper@0.3.1",
  "_id": "reaper@0.3.1",
  "_inCache": true,
  "_location": "/reaper",
  "_npmUser": {
    "email": "gregg@caines.ca",
    "name": "cainus"
  },
  "_npmVersion": "1.1.62",
  "_phantomChildren": {},
  "_requested": {
    "name": "reaper",
    "raw": "reaper@0.3.1",
    "rawSpec": "0.3.1",
    "scope": null,
    "spec": "0.3.1",
    "type": "version"
  },
  "_requiredBy": [
    "/percolator"
  ],
  "_resolved": "https://registry.npmjs.org/reaper/-/reaper-0.3.1.tgz",
  "_shasum": "d60f82ffb85bbc37e5cb6c6a3c2aaa6e72a2c70f",
  "_shrinkwrap": null,
  "_spec": "reaper@0.3.1",
  "_where": "/home/dave/src/experiments/NodeTutorial/keyword-wrangler/node_modules/percolator",
  "bugs": {
    "url": "https://github.com/cainus/reaper/issues"
  },
  "dependencies": {
    "negotiator": "0.2.5",
    "underscore": ""
  },
  "description": "manages serializers/deserializers for API content-types/media-types",
  "devDependencies": {
    "hottap": "1.0.0",
    "jscoverage": "0.3.7",
    "mocha": "1.3.2",
    "should": "1.1.0",
    "watch": "0.5.1"
  },
  "directories": {},
  "dist": {
    "shasum": "d60f82ffb85bbc37e5cb6c6a3c2aaa6e72a2c70f",
    "tarball": "http://registry.npmjs.org/reaper/-/reaper-0.3.1.tgz"
  },
  "installable": true,
  "keywords": [
    "api",
    "conneg",
    "content",
    "content-type",
    "http",
    "media",
    "media-type",
    "negotiation",
    "representation",
    "rest"
  ],
  "license": "MIT",
  "main": "./reaper",
  "maintainers": [
    {
      "name": "cainus",
      "email": "gregg@caines.ca"
    }
  ],
  "name": "reaper",
  "optionalDependencies": {},
  "readme": "# Reaper\n\n[![Build\nStatus](https://secure.travis-ci.org/cainus/reaper.png?branch=master)](http://travis-ci.org/cainus/reaper)\n[![Coverage\nStatus](https://coveralls.io/repos/cainus/reaper/badge.png?branch=master)](https://coveralls.io/r/cainus/reaper)\n[![NPM\nversion](https://badge.fury.io/js/reaper.png)](http://badge.fury.io/js/reaper)\n\n\nReaper picks the correct media-type for a resource based on a\nrequest's Accept header and what the resource or server supports.\n\nIt also allows the registration of serializers / deserializers for\nautomatic serialization and deserialization of any formats that might \nbe automatically serializable/deserializable.\n\n\n```javascript\n\nvar reaper = new Reaper();\nreaper.register('application/json', \n                function(str){ return JSON.parse(str); },\n                function(obj){ return JSON.stringify(obj); });\n\nreaper.isAcceptable('application/json');   // returns true\nreaper.isAcceptable('*/*');   // returns true\nreaper.isAcceptable('application/xml');   // returns false\n\nreaper.isRegistered('application/json');  // returns true\nreaper.isRegistered('application/xml');  // returns false\n\nreaper.input(\"application/json\", '{\"hello\" : \"world\"}');  // returns {hello : \"world\"}\nreaper.output(\"application/json\", {hello : \"world\"});   // returns '{\"hello\" : \"world\"}'\n\n\n```\n\nAdditionally Reaper comes with a connect-compatible middleware that attaches a `body` and `rawBody` object to your request object that automatically uses any deserializer you may have configured for the content-type to populate the `body` property.  The middleware will return errors in the case of bad deserialization, or unacceptable Accept / Content-Type headers.\n\n\n",
  "repository": {
    "type": "git",
    "url": "git@github.com:cainus/reaper.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.3.1"
}
